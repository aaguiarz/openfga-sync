version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: openfga-sync-postgres
    environment:
      POSTGRES_DB: openfga_sync
      POSTGRES_USER: openfga_user
      POSTGRES_PASSWORD: openfga_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U openfga_user -d openfga_sync"]
      interval: 10s
      timeout: 5s
      retries: 5

  # OpenFGA server (for testing)
  openfga:
    image: openfga/openfga:latest
    container_name: openfga-server
    command: run --playground-enabled
    environment:
      OPENFGA_DATASTORE_ENGINE: postgres
      OPENFGA_DATASTORE_URI: postgres://openfga_user:openfga_password@postgres:5432/openfga_sync?sslmode=disable
    ports:
      - "8080:8080"
      - "8081:8081"  # Playground
      - "3000:3000"  # Profiler
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # OpenFGA Sync Service
  openfga-sync:
    build: .
    container_name: openfga-sync-service
    environment:
      # OpenFGA configuration
      OPENFGA_ENDPOINT: "http://openfga:8080"
      OPENFGA_STORE_ID: "${OPENFGA_STORE_ID:-01HXXX-EXAMPLE-STORE-ID}"
      OPENFGA_TOKEN: "${OPENFGA_TOKEN:-}"
      
      # Database configuration
      BACKEND_TYPE: "postgres"
      BACKEND_DSN: "postgres://openfga_user:openfga_password@postgres:5432/openfga_sync?sslmode=disable"
      BACKEND_MODE: "${BACKEND_MODE:-changelog}"
      
      # Service configuration
      POLL_INTERVAL: "5s"
      BATCH_SIZE: "100"
      MAX_RETRIES: "3"
      RETRY_DELAY: "1s"
      ENABLE_VALIDATION: "true"
      
      # Logging
      LOG_LEVEL: "${LOG_LEVEL:-info}"
      LOG_FORMAT: "${LOG_FORMAT:-json}"
      
      # Observability
      METRICS_ENABLED: "true"
      METRICS_PATH: "/metrics"
    ports:
      - "8082:8080"  # Health/metrics endpoint
    depends_on:
      postgres:
        condition: service_healthy
      openfga:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (for monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: openfga-sync-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - openfga-sync

  # Grafana (for dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: openfga-sync-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: openfga-sync-network
