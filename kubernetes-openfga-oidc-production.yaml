# Kubernetes Deployment for OpenFGA Sync with OIDC Authentication
# Production-ready deployment with high availability, monitoring, and security
---
apiVersion: v1
kind: Namespace
metadata:
  name: openfga-sync
  labels:
    name: openfga-sync
    app.kubernetes.io/name: openfga-sync
    app.kubernetes.io/component: sync-service

---
# Secret for OIDC credentials
apiVersion: v1
kind: Secret
metadata:
  name: openfga-sync-oidc-credentials
  namespace: openfga-sync
type: Opaque
stringData:
  # Source OpenFGA OIDC credentials
  source-client-id: "your-source-client-id"
  source-client-secret: "your-source-client-secret"
  source-auth0-domain: "https://source-domain.auth0.com/"
  source-store-id: "01HXXX-SOURCE-STORE-ID"
  
  # Target OpenFGA OIDC credentials
  target-client-id: "your-target-client-id"
  target-client-secret: "your-target-client-secret"
  target-auth0-domain: "https://target-domain.auth0.com/"
  target-store-id: "01HXXX-TARGET-STORE-ID"

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: openfga-sync-config
  namespace: openfga-sync
data:
  config.yaml: |
    server:
      port: 8080
      host: "0.0.0.0"
    
    openfga:
      endpoint: "https://api.us1.fga.dev"
      # store_id loaded from secret
      oidc:
        # issuer loaded from secret
        audience: "https://api.us1.fga.dev/"
        # client_id and client_secret loaded from secret
        scopes: ["read:tuples", "read:stores", "read:changes"]
        # token_issuer loaded from secret
    
    backend:
      type: "openfga"
      mode: "changelog"
      # DSN constructed from secret values
    
    service:
      poll_interval: "10s"
      batch_size: 100
      max_retries: 3
      retry_delay: "1s"
      max_retry_delay: "30s"
      backoff_factor: 2.0
      request_timeout: "30s"
      rate_limit_delay: "50ms"
      enable_validation: true
    
    logging:
      level: "info"
      format: "json"
    
    observability:
      opentelemetry:
        enabled: true
        endpoint: "http://jaeger-collector.observability.svc.cluster.local:14268"
        service_name: "openfga-sync-oidc"
      metrics:
        enabled: true
        path: "/metrics"
    
    leadership:
      enabled: true
      namespace: "openfga-sync"
      lock_name: "openfga-sync-leader"

---
# ServiceAccount with RBAC for leader election
apiVersion: v1
kind: ServiceAccount
metadata:
  name: openfga-sync
  namespace: openfga-sync
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: openfga-sync-leader-election
  namespace: openfga-sync
rules:
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: openfga-sync-leader-election
  namespace: openfga-sync
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: openfga-sync-leader-election
subjects:
- kind: ServiceAccount
  name: openfga-sync
  namespace: openfga-sync

---
# Service for internal communication and metrics
apiVersion: v1
kind: Service
metadata:
  name: openfga-sync-service
  namespace: openfga-sync
  labels:
    app: openfga-sync
    component: sync-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "8080"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: health
    port: 8081
    targetPort: 8080
    protocol: TCP
  selector:
    app: openfga-sync
    component: sync-service

---
# Deployment with high availability
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openfga-sync-deployment
  namespace: openfga-sync
  labels:
    app: openfga-sync
    component: sync-service
spec:
  replicas: 3  # High availability with leader election
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: openfga-sync
      component: sync-service
  template:
    metadata:
      labels:
        app: openfga-sync
        component: sync-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: openfga-sync
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534  # nobody user
        fsGroup: 65534
      containers:
      - name: openfga-sync
        image: openfga-sync:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        # Source OpenFGA Configuration
        - name: OPENFGA_ENDPOINT
          value: "https://api.us1.fga.dev"
        - name: OPENFGA_STORE_ID
          valueFrom:
            secretKeyRef:
              name: openfga-sync-oidc-credentials
              key: source-store-id
        - name: OPENFGA_OIDC_ISSUER
          valueFrom:
            secretKeyRef:
              name: openfga-sync-oidc-credentials
              key: source-auth0-domain
        - name: OPENFGA_OIDC_AUDIENCE
          value: "https://api.us1.fga.dev/"
        - name: OPENFGA_OIDC_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: openfga-sync-oidc-credentials
              key: source-client-id
        - name: OPENFGA_OIDC_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: openfga-sync-oidc-credentials
              key: source-client-secret
        - name: OPENFGA_OIDC_SCOPES
          value: "read:tuples read:stores read:changes"
        - name: OPENFGA_OIDC_TOKEN_ISSUER
          valueFrom:
            secretKeyRef:
              name: openfga-sync-oidc-credentials
              key: source-auth0-domain
        
        # Backend Configuration (constructed from secret values)
        - name: BACKEND_TYPE
          value: "openfga"
        - name: BACKEND_MODE
          value: "changelog"
        - name: BACKEND_DSN
          value: |
            {
              "endpoint": "https://api.eu1.fga.dev",
              "store_id": "$(TARGET_STORE_ID)",
              "oidc": {
                "issuer": "$(TARGET_AUTH0_DOMAIN)",
                "audience": "https://api.eu1.fga.dev/",
                "client_id": "$(TARGET_CLIENT_ID)",
                "client_secret": "$(TARGET_CLIENT_SECRET)",
                "scopes": ["write:tuples", "read:tuples", "read:stores"],
                "token_issuer": "$(TARGET_AUTH0_DOMAIN)"
              }
            }
        
        # Helper environment variables for DSN construction
        - name: TARGET_STORE_ID
          valueFrom:
            secretKeyRef:
              name: openfga-sync-oidc-credentials
              key: target-store-id
        - name: TARGET_AUTH0_DOMAIN
          valueFrom:
            secretKeyRef:
              name: openfga-sync-oidc-credentials
              key: target-auth0-domain
        - name: TARGET_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: openfga-sync-oidc-credentials
              key: target-client-id
        - name: TARGET_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: openfga-sync-oidc-credentials
              key: target-client-secret
        
        # Service Configuration
        - name: SERVICE_POLL_INTERVAL
          value: "10s"
        - name: SERVICE_BATCH_SIZE
          value: "100"
        - name: SERVICE_MAX_RETRIES
          value: "3"
        - name: SERVICE_ENABLE_VALIDATION
          value: "true"
        
        # Logging
        - name: LOGGING_LEVEL
          value: "info"
        - name: LOGGING_FORMAT
          value: "json"
        
        # Observability
        - name: OBSERVABILITY_OPENTELEMETRY_ENABLED
          value: "true"
        - name: OBSERVABILITY_OPENTELEMETRY_ENDPOINT
          value: "http://jaeger-collector.observability.svc.cluster.local:14268"
        - name: OBSERVABILITY_OPENTELEMETRY_SERVICE_NAME
          value: "openfga-sync-oidc"
        - name: OBSERVABILITY_METRICS_ENABLED
          value: "true"
        - name: OBSERVABILITY_METRICS_PATH
          value: "/metrics"
        
        # Leadership Election
        - name: LEADERSHIP_ENABLED
          value: "true"
        - name: LEADERSHIP_NAMESPACE
          value: "openfga-sync"
        - name: LEADERSHIP_LOCK_NAME
          value: "openfga-sync-leader"
        
        # Server Configuration
        - name: SERVER_PORT
          value: "8080"
        - name: SERVER_HOST
          value: "0.0.0.0"
        
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        
        # Resource limits and requests
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: config-volume
        configMap:
          name: openfga-sync-config
      
      # Pod security and scheduling
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - openfga-sync
              topologyKey: kubernetes.io/hostname
      
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
# HorizontalPodAutoscaler for automatic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: openfga-sync-hpa
  namespace: openfga-sync
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: openfga-sync-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: openfga-sync-pdb
  namespace: openfga-sync
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: openfga-sync
      component: sync-service

---
# ServiceMonitor for Prometheus scraping (if using prometheus-operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: openfga-sync-monitor
  namespace: openfga-sync
  labels:
    app: openfga-sync
    component: sync-service
spec:
  selector:
    matchLabels:
      app: openfga-sync
      component: sync-service
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---
# NetworkPolicy for security (optional)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: openfga-sync-network-policy
  namespace: openfga-sync
spec:
  podSelector:
    matchLabels:
      app: openfga-sync
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: observability  # Allow monitoring
    - namespaceSelector:
        matchLabels:
          name: kube-system   # Allow health checks
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - {}  # Allow all outbound (HTTPS to OpenFGA, Auth0)

# Deployment Instructions:
# 
# 1. Update the Secret with your actual OIDC credentials:
#    kubectl create secret generic openfga-sync-oidc-credentials \
#      --from-literal=source-client-id="your-source-client-id" \
#      --from-literal=source-client-secret="your-source-client-secret" \
#      --from-literal=source-auth0-domain="https://source-domain.auth0.com/" \
#      --from-literal=source-store-id="01HXXX-SOURCE-STORE-ID" \
#      --from-literal=target-client-id="your-target-client-id" \
#      --from-literal=target-client-secret="your-target-client-secret" \
#      --from-literal=target-auth0-domain="https://target-domain.auth0.com/" \
#      --from-literal=target-store-id="01HXXX-TARGET-STORE-ID" \
#      -n openfga-sync
# 
# 2. Deploy the application:
#    kubectl apply -f kubernetes-openfga-oidc-production.yaml
# 
# 3. Verify deployment:
#    kubectl get pods -n openfga-sync
#    kubectl logs -n openfga-sync -l app=openfga-sync
# 
# 4. Check leader election:
#    kubectl get leases -n openfga-sync
# 
# 5. Monitor metrics:
#    kubectl port-forward -n openfga-sync svc/openfga-sync-service 8080:8080
#    curl http://localhost:8080/metrics
# 
# Features:
# - High Availability with leader election
# - Automatic scaling based on CPU/memory
# - Security with RBAC, NetworkPolicy, and non-root containers
# - Comprehensive monitoring and observability
# - Graceful shutdown and health checks
# - Production-ready resource limits and affinities
